package com.ridebookingapp.model;

import java.util.Collection;
import java.util.Collections;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;

@Entity
@Table(name= "user" , uniqueConstraints = @UniqueConstraint(columnNames = "email") )
public class User implements UserDetails {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long userid;
	private String name;
	private String username;
	private String email;
	private String password;
	private UserRole userRole;
	private boolean locked;
	private boolean enabled;
	
	public User() {
		
	}

	public Long getUser_id() {
		return user_id;
	}

	public void setUser_id(Long user_id) {
		this.user_id = user_id;
	}
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUser_name() {
		return user_name;
	}

	public void setUser_name(String user_name) {
		this.user_name = user_name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}
    
	@Override
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public UserRole getUserRole() {
		return userRole;
	}

	public void setUserRole(UserRole userRole) {
		this.userRole = userRole;
	}

	public boolean isLocked() {
		return locked;
	}

	public void setLocked(boolean locked) {
		this.locked = locked;
	}

	public boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}


	@Override
	public String getUsername() {
		
		return null;
	}
	
	
	@Override
	public String toString() {
		return "User [user_id=" + user_id + ", name=" + name + ", user_name=" + user_name + ", email=" + email
				+ ", password=" + password + ", userRole=" + userRole + ", locked=" + locked + ", enabled=" + enabled
				+ ", getName()=" + getName() + ", getUser_id()=" + getUser_id() + ", getUser_name()=" + getUser_name()
				+ ", getEmail()=" + getEmail() + ", getPassword()=" + getPassword() + ", getUserRole()=" + getUserRole()
				+ ", isLocked()=" + isLocked() + ", isEnabled()=" + isEnabled() + ", getAuthorities()="
				+ getAuthorities() + ", getUsername()=" + getUsername() + ", getClass()=" + getClass() + ", hashCode()="
				+ hashCode() + ", toString()=" + super.toString() + "]";
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		SimpleGrantedAuthority authority=new SimpleGrantedAuthority(userRole.name());
		return Collections.singletonList(authority);
		
	}

	

}
